/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/libr@1.0.0/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const ArgumentParser=require("argparse").ArgumentParser,path=require("path"),fs=require("fs-extra"),spawn=require("child_process").spawn,packageJson=require("./package.json");function runProcess(e,t,n=[],a={}){return new Promise((o,s)=>{let r=a.cwd;if(r){if(!1===fs.existsSync(r))return s("path "+r+" path doesn't exist");if(!1===fs.statSync(r).isDirectory())return s("path "+r+" is not a directory")}const i=a.onLog||console.log;function c(e,t){(e=e.trim())&&i(e,t)}!0!==a.mute&&(console.log("\n - - - - - -\n Starting process "+e+(r?" in "+r:"")+"...\n - - - - - -\n"),console.log(" > "+t+" "+n.join(" ")));const p=spawn(t,n||[],{cwd:r,env:process.env});p.stdout.on("data",e=>{c(e.toString(),a)}),p.stderr.on("data",e=>{c(e.toString(),a)}),p.on("close",t=>{!0!==a.mute&&console.log("Process "+e+" closed ("+t+")\n - - - - - -\n"),a.onExit?a.onExit():o(t)})})}function printHelp(){console.log("to run: npx libr [npm path] [module name]\n  npm path: \t\t\t\tthe npm package to install\n  module name: (optional) \tthe filesystem package name\n\t\t\t\t\t\t\t(defaults to last of npm path)\n")}async function run(){const e=new ArgumentParser({version:packageJson.version,addHelp:!0,description:packageJson.description});e.addArgument("package",{description:"the npm package to install"}),e.addArgument(["--name","-n"],{description:"the local package name",defaultValue:""}),e.addArgument(["--out","-o"],{description:"the folder to write to",defaultValue:"node_libs"});const t=e.parseArgs(),n=t.package;("string"!=typeof n||n.length<1)&&(console.error("Couldn't understand package."),printHelp(),process.exit(1));const a=t.name||n,o=path.join(__dirname,"_libs");!1===await fs.exists(o)&&await fs.mkdir(o);const s=t.out||"node_libs",r=path.join(process.cwd(),s);!1===await fs.exists(r)&&await fs.mkdir(r);const i=path.join(r,path.basename(a));await runProcess("Make package placeholder","npm",["init","-y"],{cwd:o}),await runProcess("Install package","npm",["i",n],{cwd:o}),await runProcess("Package package","npx",["@zeit/ncc","build","node_modules/"+a,"-o",i],{cwd:o}),await fs.emptyDir(o)}run();
//# sourceMappingURL=/sm/19aa3c5d5873e8d7b1a5d0f0526f04a8fadde251051586fba6c2202970c3e02a.map